#!/bin/bash

# set defaults if no explicit parameters given
KSTORE=${KSTORE:="${HOME}/keys/_default"}
KSPWD=${KSPWD:="stdin"}
VERBOSITY=${VERBOSITY:-1}

declare -a APPLY_PATCHES
APPLY_PATCHES=()

declare -a INCLUDE_PATHES
INCLUDE_PATHES=("/usr/local/lib/apkps/patches/")

function log_message() {
  local level=$1
  shift 

  if [ "${VERBOSITY:-1}" -ge "$level" ]; then
    echo $*
  fi
}

function log_filter() {
  local level=$1

  if [ "${VERBOSITY:-1}" -ge "$level" ]; then
    cat
  fi
}

function load_patches() {

    for d in ${INCLUDE_PATHES[@]} 
     do
         test -d ${d} || continue 
        for p in ${d}/*.inc ;
            do 
                test -x ${p} || continue
                source ${p} 
                log_message 1 "Loading patch file '${p}'  ..."
            done
    done

}

function list_patches() {

    for d in ${INCLUDE_PATHES[@]} 
     do
         test -d ${d} || continue 
        for p in ${d}/*.inc ;
            do 
                test -x ${p} || continue
                echo "- '${p}'"
            done
    done

}

function create_keystore() {
    read -p "Please enter alias for to be created keystore > " -i "my-key-alias" ksalias
    read -p "Please enter path for to be created keystore > " -i "${KSTORE}" kspath
    keytool -genkey -v -keystore ${kspath} -alias ${ksalias} -keyalg RSA -keysize 2048 -validity 10000
    test -r ${kspath} && KSTORE="${kspath}" || exit
}

function sign() {

    if [ ! -r "$1" ] ; then
        log_message 0 " =!!  ERROR: Input File '$1' not accesible."
        exit 1
    else
        APK=${1}
    fi

    if [ ! -r "${KSTORE}" ] ; then
        log_message 0 " =!!  ERROR: Keystore File '${KSTORE}' not accesible." 
        exit 1
    fi

    log_message 1 " ==>  Processing '${APK}'"

    log_message 1 "   >  Cloning input file ..."
    CLONE_FILE=${APK%.apk}.tmp
    cp "${APK}" "${CLONE_FILE}"
    ORIGN_FILE=${APK%.apk}.orig
    mv "${APK}" "${ORIGN_FILE}"

    log_message 1 "   >  Cleaning 'META-INF/*' directory ..."
    zip -q -d "${CLONE_FILE}" 'META-INF/MANIFEST.MF' 'META-INF/*.SF' 'META-INF/*.RSA' | log_filter 2

    for patch in ${APPLY_PATCHES[@]}
    do
        if [ -n "${patch}" ] ; then
            log_message 1 "   >>  Aplying patch '${patch}' <<<"
            apply_patch_${patch} $(realpath ${CLONE_FILE}) || \
                log_message 1 "   >>  ERROR while trying to apply patch"
        fi
    done

    log_message 1 "   >  Adjusting APK alignment ..."
    OUT_FILE=${CLONE_FILE}-aligned
    if zipalign 4 "${CLONE_FILE}" "${OUT_FILE}" ; then
        log_message 1 "   >  Verifying APK alignment ..."
        zipalign -c 4 "${OUT_FILE}" | log_filter 2
        mv -f "${OUT_FILE}" "${CLONE_FILE}"
    else
        log_message 0 "   >  ERROR while trying to align ..." 
        exit 1
    fi

    log_message 1 "   >  Signing package ..."
    apksigner sign --ks "${KSTORE}" --ks-pass "${KSPWD}" "${CLONE_FILE}"

    log_message 1 "   >  Verifying signature ..."
    apksigner verify "${CLONE_FILE}" | log_filter 2

    log_message 1 "   >  Moving package ..."
    mv -v "${CLONE_FILE}" "${APK}" 

    log_message 1 "+ DONE"

}

function sign_batch() {
    log_message 1 " =>>  Processing apk-files with filter: ${1}/*.apk"
    for APK in ${1}/*.apk
        do sign ${APK}
    done
}

function startup() {
    while getopts ":cdD:k:p:P:lhv" OPT; do
        case $OPT in
        
        'k')
            # set explicit KSTORE file path to keystore
            test -r ${OPTARG} && KSTORE="${OPTARG}" || usage "ERROR: Keystore '${OPTARG}' does not exist/not readable!"
            ;;
        
        'P')
            # set password
            KSPWD="${OPTARG}"
            ;;
        
        'p')
            # set patch to apply
            IFS=' ,;:' read -ra ADDR <<< "$OPTARG"
            APPLY_PATCHES=("${ADDR[@]}")
            ;;
        
        'l')
            # list available patches
            list_patches
            exit 0
            ;;
        
        'D')
            # set include_patch_dirs
            IFS=' ,;:' read -ra ADDR <<< "$OPTARG"
            INCLUDE_PATHES=("${ADDR[@]}")
            ;;

        'c')
            # create  keystore
            create_keystore
            exit
            ;;

        'h')
            usage
            ;;
        
        'd')
            set -x              # turn on debugging
            ;;
        
        'v')
            VERBOSITY+=1        # increase verbosity level
            ;;
        
        ':')
            usage "ERROR: Option '-${OPTARG}' is missing a required argument!"
            ;; 

        *)
            usage "ERROR: No such option!"
            ;;

        esac
    done

    shift $((OPTIND-1))

    load_patches

    for file in $* ; do
        if [ -f ${file} ] ; then 
            sign ${file}
        elif [ -d ${file} ] ; then
            sign_batch ${file}
        fi
    done 

}


function usage() {

cat <<EOF
$0  -c | -h | [OPTIONS] <INFILE/INDIR>

  -k KSTORE                 keystore file to use for signing APKs
                            (default: '${KSTORE}')
  -P PASSWORD               password for keystore
                            (default: '${KSPWD}')

  -D DIRECTORY[,...]        add DIRECTORY from which to load further patch snippets
  -p PATCH[,...]            patch to apply to apk, e.g. 'Linphone'
  -l                        list available patch include snippets

  -c                        create keystore
  -v                        be verbose
  -d                        enable script debugging
  -h                        print help

EOF

if [ -n "$1" ] ; then
    log_message 1 "$1"
    exit 1
else
    exit
fi

}


startup $*

# reset debug flag if any
set +x
